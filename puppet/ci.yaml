# Puppet CI Resources

classes:
  - nsidc_jenkins

# Jenkins Plugins
nsidc_jenkins::plugins:
  git: {}
  git-client: {}
  git-parameter: {}
  scm-api: {}
  credentials: {}
  ssh-credentials: {}
  greenballs: {}
  jobConfigHistory: {}
  mailer: {}
  instant-messaging: {}
  jabber: {}
  xvnc: {}
  ansicolor: {}

# Jenkins Jobs
nsidc_jenkins::jobs:
  "%{hiera('project')}_A01_Checkout_Project":
    description: clone the project into workspaces/%{hiera('project')}
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}
    parameters:
      - type: string
        name: ref
        description: git ref (branch, tag, or SHA) to checkout
        default: master
    git:
      repo: "%{hiera('gitrepo')}"
      poll_scm: true
    command: |
      git checkout $ref
    trigger_job: "%{hiera('project')}_A02_Provision_VM"

  "%{hiera('project')}_A02_Provision_VM":
    description: >
      Provision an integration, QA, staging, or production VM for IceBridge
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}
    parameters:
      - type: string
        name: target_environment
        description: VM environment to build
        default: "integration"
    command: |
      #!/bin/bash
      vagrant nsidc hijack --env=$target_environment || true
      vagrant nsidc up --env=$target_environment --provision

      TARGET_DIR="/vagrant/production"
      if [ $target_environment = "integration" ]; then
        TARGET_DIR="/vagrant/development"
      fi

      vagrant nsidc ssh --env=$target_environment -c "cd $TARGET_DIR && docker-compose build && DEPLOYMENT_ENV=$target_environment docker-compose up -d"

  "%{hiera('project')}_Z01_Integration_Refresh_Portal":
    description: >
      Pull new images and rebuild and restart portal in integration
    workspace: /var/lib/jenkins/workspaces/%{hiera('project')}
    command: |
      vagrant nsidc ssh --env=integration -c "cd /vagrant/development && docker pull nsidc/icebridge-interface && docker pull nsidc/icebridge-services && docker pull nsidc/icebridge-workers && docker-compose build --no-cache && docker-compose stop && DEPLOYMENT_ENV=integration docker-compose up -d"
